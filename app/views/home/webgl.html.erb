<canvas id="canvas"></canvas>
<script type="shader/vertex" id="vs">
  attribute vec3 position;
  uniform mat4 mvpMatrix;

  void main(){
    gl_Position = mvpMatrix * vec4(position, 1.0);
  }


</script>

<script type="shader/fragment" id="fs">
  precision mediump float;
  uniform vec3 color;

  void main(){
    gl_FragColor = vec4(color, 1.0);
  }

</script>

<style>
  canvas {
    padding: 0;
    margin: 0;
    width: 100%;
    height: 100%;
  }

  body{
    background-color: black;
    margin: 0;
    padding: 0;
    text-align: center;
    overflow: hidden;
  }
</style>


<script type="text/javascript" charset="utf-8">
  
  var color = [1.0, 0.0, 0.5];
  
  function changeColor(r,g,b) {
      color = [r,g,b];
  }
  
    (function () {
        var c = document.getElementById("canvas");
        c.height = window.innerHeight;
        c.width = window.innerWidth;
        var gl = c.getContext("webgl");

        if (!gl) {
            alert('webgl not supported!');
            return false;
        }

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.clearDepth(1.0);
        gl.enable(gl.BLEND);
        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);

        var vs_source = document.getElementById('vs').textContent;
        var fs_source = document.getElementById('fs').textContent;
        var program = shaderProgram(vs_source, fs_source);

        var attlocation = [];
        attlocation[0] = gl.getAttribLocation(program, "position");

        var attstride = [];
        attstride[0] = 3;

        var unilocation = [];
        unilocation[0] = gl.getUniformLocation(program, "mvpMatrix");
        unilocation[1] = gl.getUniformLocation(program, "color");

        var poli_position = [
            -1.0, 1.0, 0.0,
            -1.0, -1.0, 0.0,
            1.0, 1.0, 0.0,
            1.0, -1.0, 0.0
        ];
        var poli_vbo = generateVBO(poli_position);
        var vbolist = [poli_vbo];

        var index = [
            0, 1, 2,
            1, 2, 3
        ];

        var index_buffer = generateIBO(index);

        var m = new matIV();
        var mMatrix = m.identity(m.create());
        var vMatrix = m.identity(m.create());
        var pMatrix = m.identity(m.create());
        var vpMatrix = m.identity(m.create());
        var mvpMatrix = m.identity(m.create());

        var cameraPosition = [0.0, 0.0, 3.0];
        var centerPoint = [0.0, 0.0, 0.0];
        var cameraUp = [0.0, 1.0, 0.0];

        var fovy = 45;
        var near = 0.5;
        var far = 1000.0;
        var aspect = c.width / c.height;

        var count = 0;

        render();

        m.perspective(fovy, aspect, near, far, pMatrix);
        m.lookAt(cameraPosition, centerPoint, cameraUp, vMatrix);
        m.multiply(pMatrix, vMatrix, vpMatrix);

        function render() {
            m.rotate(mMatrix, 0.1, [1.0, 0.0, 0.0], mMatrix);
            m.multiply(vpMatrix, mMatrix, mvpMatrix);
            setAttribute(vbolist, attlocation, attstride, index_buffer);

            gl.uniformMatrix4fv(unilocation[0], false, mvpMatrix);
            gl.uniform3fv(unilocation[1], color);

//            gl.drawArrays(gl.TRIANGLES, 0, 3);
            gl.drawElements(gl.TRIANGLES, index.length, gl.UNSIGNED_SHORT, 0);

            gl.flush();
            requestAnimationFrame(render);
        }


        function shaderProgram(vertexSource, fragmentSource) {
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(vertexShader, vertexSource);
            gl.compileShader(vertexShader);
            if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                alert(gl.getShaderInfoLog(vertexShader) + "in vertexShader");
                return null;
            }
            gl.shaderSource(fragmentShader, fragmentSource);
            gl.compileShader(fragmentShader);
            if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                alert(gl.getShaderInfoLog(fragmentShader) + "in fragmentShader");
                return null;
            }
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                alert(gl.getProgramInfoLog(program));
                return null;
            }
            gl.useProgram(program);
            return program;
        }

        function generateVBO(data) {
            var vbo = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
            gl.bindBuffer(gl.ARRAY_BUFFER, null);
            return vbo;
        }

        function generateIBO(data) {
            var ibo = gl.createBuffer();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int16Array(data), gl.STATIC_DRAW);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
            return ibo;
        }

        function setAttribute(vbo, attL, attS, ibo) {
            for (var i in vbo) {
                gl.bindBuffer(gl.ARRAY_BUFFER, vbo[i]);
                gl.enableVertexAttribArray(attL[i]);
                gl.vertexAttribPointer(attL[i], attS[i], gl.FLOAT, false, 0, 0);
            }
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
        }

        function generateTexture(source) {
            var img = new Image();
            img.onload = function () {
                texture = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
                gl.generateMipmap(gl.TEXTURE_2D);
                gl.bindTexture(gl.TEXTURE_2D, null);
            };
            img.src = source;
        }

        function createFramebuffer(width, height, format) {
            var textureFormat = null;
            if (!format) {
                textureFormat = gl.UNSIGNED_BYTE;
            } else {
                textureFormat = format;
            }
            var frameBuffer = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
            var depthRenderBuffer = gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRenderBuffer);
            var fTexture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, fTexture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, textureFormat, null);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fTexture, 0);
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            return {f: frameBuffer, d: depthRenderBuffer, t: fTexture};
        }
    })();
</script>