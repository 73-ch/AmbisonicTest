<h1>Ambisonic Test</h1>
<div id="control">
  <button id="load" onClick="getAudioBuffer()">load!!</button>
  <button id="btn" onClick="initSound()">init!!</button>
  <button id="resume" onClick="resume()">resume!!</button>
  <button id="suspend" onClick="suspend()">suspend!!</button>
</div>
<div id="info">
  <div class="info_item">
    audio state
    <h2 id="audio-state">Please load</h2>
  </div>
  <div class="info_item">
    network state
    <h2 id="network-message">ready</h2>
  </div>
  <div class="info_item">
    current_time
    <h2 id="current-time"></h2>
  </div>
  <div class="info_item">
    tolerance
    <h2 id="tolerance"></h2>
  </div>
</div>

<button id="init_time" onClick="initTime()">init time</button>

<div id="server-time-wrapper">
  <table id="init-time-table">
    <thread>
      <tr>
        <th>send_time</th>
        <th>receive_time</th>
        <th>interval</th>
        <th>server_time</th>
        <th>tolerance</th>
      </tr>
    </thread>
    <tbody>
    </tbody>
  </table>
</div>


<button id="start" onclick="broadcast()">broadcast</button>

<script>
  var key = <%= @file_name %>;
    var req;
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    var context = new AudioContext();
    var source;
    var state_html;
    var network_message_html;
    var c_time_html;
    var time_table_html;
    var tolerance_html;

    var worker;

    var start_time;

    var init_time = 0;
    var js_send_times = [];
    var js_receive_times = [];
    var server_times = [];
    var tolerances = [];

    var init_send_count = 0;
    var init_receive_count = 0;

    var tolerance_sum = 0;
    var tolerance = 0;

    const OFF_SET= 1529100000;

    var ua = navigator.userAgent.toLowerCase();
    var use_HRT = false;

    if(!(ua.match(/ios|iphone|ipad|ipod|androd/)) && ua.match(/chrome|firefox/)) {
        use_HRT = true;
    }

    var getTime;

    if (use_HRT) {
        getTime = function () {
            return init_time + performance.now();
        }
    } else {
        getTime = function () {
            return init_time + context.currentTime * 1000;
        }
    }


    // Audio 用の buffer を読み込む
    var getAudioBuffer = function () {
        req = new XMLHttpRequest();
        // array buffer を指定
        req.responseType = 'arraybuffer';

        req.open('GET', "/<%= @file_name %>.mp3", true);
        req.send();
    };

    function broadcast() {
        App.ambient.start_signal();
    }


    // サウンドを再生
    function playSound(g_time) {
        console.log(getTime());
        console.log(g_time);
        console.log(tolerance);
        var timer = g_time - getTime() - tolerance;
        source.start(g_time - init_time + tolerance);
//        worker.postMessage({message: "start", time: timer});


//        console.log("g_time :" +  g_time.toString());
        network_message_html.textContent = "received signal";
        start_time = g_time;
        console.log("current_time : " + (getTime() - tolerance));
        console.log(parseFloat(timer));

//        setTimeout(resume, parseInt(timer));
    }

    function initSound() {
        context = new AudioContext();
        context.createBufferSource().start(0);
        source = context.createBufferSource();
        console.log(req);
        context.decodeAudioData(req.response, function (buffer) {
            source.buffer = buffer;
            source.loop = true;

            source.connect(context.destination);
//            source.start(0);

//            context.suspend();
            state_html.textContent = "ready";
//            for (var i = 0; i < 20; i++) {
//                setTimeout(initTime, i * 200);
//            }
            init_time = new Date().getTime() - OFF_SET*1000;
            if (use_HRT) init_time -= performance.now();
            initTime();
            setInterval(initTime, 2000);
        });
    }

    function initTime() {
        js_send_times[init_send_count] = getTime();
        performance.mark('send' + init_send_count);
        App.ambient.init_time({"key": key});
        init_send_count++;
    }

    function setInitialTime(g_time) {
        js_receive_times[init_receive_count] = getTime();
        performance.measure("interval"+init_receive_count, "send"+init_receive_count, "receive"+init_receive_count);
        var interval = performance.getEntriesByName("interval"+init_receive_count)[0].duration;
        server_times[init_receive_count] = parseFloat(g_time)*1000.+ interval / 2.0;
        tolerances[init_receive_count] = js_receive_times[init_receive_count] - server_times[init_receive_count];

        var row = time_table_html.insertRow(-1);
        row.insertCell(-1).innerHTML = js_send_times[init_receive_count];
        row.insertCell(-1).innerHTML = js_receive_times[init_receive_count];
        row.insertCell(-1).innerHTML = interval + "ms";
        row.insertCell(-1).innerHTML = server_times[init_receive_count];
        row.insertCell(-1).innerHTML = tolerances[init_receive_count] + "ms";

        if (init_receive_count > 0) {
            tolerance_sum += tolerances[init_receive_count];
            tolerance = tolerance_sum / (tolerances.length - 1);
            tolerance_html.textContent = tolerance;
        }
        init_receive_count++;
        performance.clearMarks();
        if (performance.getEntries().length >= 100)performance.clearMeasures();
    }

    function insertTable(i) {

    }

    function resume() {
        context.resume();
        state_html.textContent = "playing";
    }

    function suspend() {
        context.suspend();
        state_html.textContent = "stop";
    }

    function setTime() {
        c_time_html.textContent = getTime() - tolerance;


    }

    // main
    window.onload = function () {
        state_html = document.getElementById("audio-state");
        network_message_html = document.getElementById('network-message');
        c_time_html = document.getElementById("current-time");
        time_table_html = document.getElementById('init-time-table');
        tolerance_html = document.getElementById('tolerance');

//        worker = new Worker("<%= javascript_path "worker" %>");
//
//        worker.onmessage = function (e) {
//            if (e.data == "start_cue") {
//                source.start(0);
//            }
//        };

//        source = context.createBufferSource();

        setInterval(setTime, 100);
    };
</script>
<style>
  button {
    width: 75px;
    height: 30px;
  }

  #info {
    display: flex;
  }

  .info_item {
    margin: 10px;
  }
</style>